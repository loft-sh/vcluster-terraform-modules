name: Terraform CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: 'Install Go'
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: 'Run Go Test Cases'
        run: |
          cd test
          go run main.go > expected_output.txt

      - name: 'Terraform Init'
        id: init
        run: terraform init

      - name: 'Terraform Validate'
        id: validate
        run: terraform validate

      - name: 'Terraform Plan'
        id: plan
        run: terraform plan

      - name: 'Terraform Apply'
        id: apply
        run: terraform apply -auto-approve

      - name: 'Get Terraform Outputs'
        run: terraform output -json > terraform_output.json

      - name: 'Compare Outputs'
        run: |
          expected=$(cat test/expected_output.txt)
          terraform=$(jq -r '.updated_names.value[] | "\(.resource_name) \(.namespace) \(.vcluster_name) \(.updated_name)"' terraform_output.json)
          if [ "$expected" != "$terraform" ]; then
            echo "Output does not match expected value!"
            echo "Expected: $expected"
            echo "Terraform: $terraform"
            exit 1
          else
            echo "Output matches expected value."
          fi

      - name: 'Terraform Destroy'
        id: destroy
        if: always()
        run: terraform destroy -auto-approve
