name: Terraform CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: 'Install Go'
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.3'

      - name: 'Run Go Test Cases'
        working-directory: ./test
        run: go run main.go > expected_output.json

      - name: 'Terraform Init'
        working-directory: ./test
        run: terraform init

      - name: 'Terraform Validate'
        working-directory: ./test
        run: terraform validate

      - name: 'Terraform Plan'
        working-directory: ./test
        run: terraform plan

      - name: 'Terraform Apply'
        working-directory: ./test
        run: terraform apply -auto-approve

      - name: 'Get Terraform Outputs'
        working-directory: ./test
        run: |
          echo "OUTPUT"
          terraform output -json | tail -n +2
          echo "Count lines"
          terraform output -json | tail -n +2 | wc -l
          echo "JQ and store to file"
          terraform output -json | tail -n +2 | jq > terraform_output.json

      - name: "debug"
        working-directory: ./test
        run: awk 'NR==43' terraform_output.json

      - name: 'Compare Outputs'
        working-directory: ./test
        run: |
          echo "Expected Output:"
          cat expected_output.json | jq
          echo "Terraform Output:"
          cat terraform_output.json | jq

          # Extract values from JSON and convert to a comparable format
          expected=$(jq -c 'sort_by(.resource_name, .namespace, .vcluster_name)' expected_output.json)

          echo "EXPECTED"
          echo "${expected}"

          terraform=$(jq -c '.updated_names.value | sort_by(.resource_name, .namespace, .vcluster_name)' terraform_output.json)

          echo "TERRAFORM"
          echo "${terraform}"

          # Remove any unexpected characters or lines
          expected_clean=$(echo "$expected" | tr -d '\r' | tr -d '\n')
          terraform_clean=$(echo "$terraform" | tr -d '\r' | tr -d '\n')

          echo "Parsed Expected: $expected_clean"
          echo "Parsed Terraform: $terraform_clean"

          if [ "$expected_clean" != "$terraform_clean" ]; then
            echo "Output does not match expected value!"
            echo "Expected: $expected_clean"
            echo "Terraform: $terraform_clean"
            exit 1
          else
            echo "Output matches expected value."
          fi

      - name: 'Terraform Destroy'
        working-directory: ./test
        if: always()
        run: terraform destroy -auto-approve